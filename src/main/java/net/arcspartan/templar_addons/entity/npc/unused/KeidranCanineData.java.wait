package net.arcspartan.templar_addons.entity.npc.unused;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.arcspartan.templar_addons.core.BuiltInTemplarRegistries;
import net.arcspartan.templar_addons.core.TemplarRegistries;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.RegistryFriendlyByteBuf;
import net.minecraft.network.codec.ByteBufCodecs;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.world.entity.npc.VillagerProfession;

public class KeidranCanineData {
    public static final int MIN_KEIDRAN_LEVEL = 1;
    public static final int MAX_KEIDRAN_LEVEL = 5;
    private static final int[] NEXT_LEVEL_XP_THRESHOLDS = new int[]{0, 10, 70, 150, 250};
    public static final Codec<KeidranCanineData> CODEC = RecordCodecBuilder.create(
            dataInstance -> dataInstance.group(
                            BuiltInTemplarRegistries.KEIDRAN_CANINE_TYPE.byNameCodec().fieldOf("type").orElseGet(() -> KeidranCanineType.FOREST_WOLF).forGetter(keidranCanineData -> keidranCanineData.type),
                            BuiltInRegistries.VILLAGER_PROFESSION
                                    .byNameCodec()
                                    .fieldOf("profession")
                                    .orElseGet(() -> VillagerProfession.NONE)
                                    .forGetter(keidranCanineData -> keidranCanineData.profession),
                            Codec.INT.fieldOf("level").orElse(1).forGetter(keidranCanineData -> keidranCanineData.level)
                    )
                    .apply(dataInstance, KeidranCanineData::new)
    );
    public static final StreamCodec<RegistryFriendlyByteBuf, KeidranCanineData> STREAM_CODEC = StreamCodec.composite(
            ByteBufCodecs.registry(TemplarRegistries.KEIDRAN_CANINE_TYPE),
            keidranCanineData -> keidranCanineData.type,
            ByteBufCodecs.registry(Registries.VILLAGER_PROFESSION),
            keidranCanineData -> keidranCanineData.profession,
            ByteBufCodecs.VAR_INT,
            keidranCanineData -> keidranCanineData.level,
            KeidranCanineData::new
    );

    private final KeidranCanineType type;
    private final VillagerProfession profession;
    private final int level;

    public KeidranCanineData(KeidranCanineType pType, VillagerProfession pProfession, int pLevel) {
        this.type = pType;
        this.profession = pProfession;
        this.level = Math.max(1, pLevel);
    }

    public KeidranCanineType getType() {
        return this.type;
    }

    public VillagerProfession getProfession() {
        return this.profession;
    }

    public int getLevel() {
        return this.level;
    }


    public KeidranCanineData setType(KeidranCanineType pType) {
        return new KeidranCanineData(pType, this.profession, this.level);
    }

    public KeidranCanineData setProfession(VillagerProfession pProfession) {
        return new KeidranCanineData(this.type, pProfession, this.level);
    }

    public KeidranCanineData setLevel(int pLevel) {
        return new KeidranCanineData(this.type, this.profession, pLevel);
    }

    public static int getMinXpPerLevel(int pLevel) {
        return canLevelUp(pLevel) ? NEXT_LEVEL_XP_THRESHOLDS[pLevel - 1] : 0;
    }

    public static int getMaxXpPerLevel(int pLevel) {
        return canLevelUp(pLevel) ? NEXT_LEVEL_XP_THRESHOLDS[pLevel] : 0;
    }

    public static boolean canLevelUp(int pLevel) {
        return pLevel >= 1 && pLevel < 5;
    }
}
